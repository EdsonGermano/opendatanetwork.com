'use strict';

$(document).ready(function () {

    // Attach handler to the search button
    //
    $('.search-link').click(function () {

        var text = $('#q').val().trim();

        if (text.length === 0) $('#q').focus();else $('#form').submit();
    });
});

// Array extensions
//
Array.prototype.includes = function (s) {

    return this.indexOf(s) > -1;
};

// String extensions
//
String.prototype.format = function () {

    var args = arguments;

    return this.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] != 'undefined' ? args[number] : match;
    });
};

String.prototype.split2 = function (s) {

    var rg = this.split(s);

    if (rg.length == 1 && rg[0] === '') return [];

    return rg;
};
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ApiController = (function () {
    function ApiController() {
        _classCallCheck(this, ApiController);

        this.autoCompleteNameSuggestUrl = 'https://odn.data.socrata.com/views/7g2b-8brv/columns/autocomplete_name/suggest/{0}?size=10&fuzz=0';
        this.categoriesUrl = '/categories.json';
        this.childRegionsUrl = 'https://odn.data.socrata.com/resource/eyae-8jfy?parent_id={0}&$limit={1}';
        this.costOfLivingUrl = 'https://odn.data.socrata.com/resource/hpnf-gnfu.json?$order=name&$where=';
        this.domainsUrl = 'https://api.us.socrata.com/api/catalog/v1/domains';
        this.earningsByPlaceUrl = 'https://odn.data.socrata.com/resource/wmwh-4vak.json/?type=place&$limit=50000&$where=population%20%3E%205000';
        this.earningsUrl = 'https://odn.data.socrata.com/resource/wmwh-4vak.json?$where=';
        this.educationByPlaceUrl = 'https://odn.data.socrata.com/resource/uf4m-5u8r.json?type=place&$limit=50000&$where=population%20%3E%205000';
        this.educationUrl = 'https://odn.data.socrata.com/resource/uf4m-5u8r.json?$where=';
        this.gdpUrl = 'https://odn.data.socrata.com/resource/ks2j-vhr8.json?$where=';
        this.mostPopulousRegionTypeUrl = 'https://odn.data.socrata.com/resource/eyae-8jfy?parent_id={0}&child_type={1}&$limit={2}&$order=child_population desc';
        this.occupationsByPlaceUrl = 'https://odn.data.socrata.com/resource/qfcm-fw3i.json?occupation={0}&type=place&$limit=50000&$where=population%20%3E%205000';
        this.occupationsUrl = 'https://odn.data.socrata.com/resource/qfcm-fw3i.json?$order=occupation&$where=';
        this.parentStateUrl = 'https://odn.data.socrata.com/resource/eyae-8jfy?parent_type=state&child_id={0}';
        this.placeFromRosterUrl = 'https://odn.data.socrata.com/resource/kmnh-b5wu?id={0}';
        this.placesUrl = 'https://odn.data.socrata.com/resource/gm3u-gw57.json/?type=place&$limit=50000&$where=population%20%3E%205000';
        this.populationUrl = 'https://odn.data.socrata.com/resource/e3rd-zzmr.json?$order=year,name&$where=';
        this.similarRegionsUrl = 'https://socrata-peers.herokuapp.com/peers.json?id={0}&vectors={1}&n=10';
        this.supportedVectorsUrls = 'http://socrata-peers.herokuapp.com/supported.json?id={0}';
        this.healthDataUrls = {
            rwjf_county_health_rankings_2015: "https://odn.data.socrata.com/resource/7ayp-utp2.json?$where=",
            cdc_brfss_prevalence_2011_2013: "https://odn.data.socrata.com/resource/n4rt-3rmd.json?$where="
        };
    }

    // Promises
    //

    _createClass(ApiController, [{
        key: 'getAutoCompleteNameSuggestions',
        value: function getAutoCompleteNameSuggestions(searchTerm) {

            return d3.promise.json(this.autoCompleteNameSuggestUrl.format(encodeURIComponent(searchTerm)));
        }
    }, {
        key: 'getCategories',
        value: function getCategories() {

            return d3.promise.json(this.categoriesUrl);
        }
    }, {
        key: 'getChildRegions',
        value: function getChildRegions(regionId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.childRegionsUrl.format(regionId, limit));
        }
    }, {
        key: 'getCitiesInState',
        value: function getCitiesInState(stateId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.mostPopulousRegionTypeUrl.format(stateId, 'place', limit));
        }
    }, {
        key: 'getCostOfLivingData',
        value: function getCostOfLivingData(regionIds) {

            return this.getData(this.costOfLivingUrl, regionIds);
        }
    }, {
        key: 'getCountiesInState',
        value: function getCountiesInState(stateId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.mostPopulousRegionTypeUrl.format(stateId, 'county', limit));
        }
    }, {
        key: 'getData',
        value: function getData(url, regionIds) {

            var segments = regionIds.map(function (regionId) {
                return 'id=\'' + regionId + '\'';
            });

            return d3.promise.json(url + encodeURI(segments.join(' OR ')));
        }
    }, {
        key: 'getDomains',
        value: function getDomains() {

            return d3.promise.json(this.domainsUrl);
        }
    }, {
        key: 'getEarningsByPlace',
        value: function getEarningsByPlace() {

            return d3.promise.json(this.earningsByPlaceUrl);
        }
    }, {
        key: 'getEarningsData',
        value: function getEarningsData(regionIds) {

            return this.getData(this.earningsUrl, regionIds);
        }
    }, {
        key: 'getEducationByPlace',
        value: function getEducationByPlace() {

            return d3.promise.json(this.educationByPlaceUrl);
        }
    }, {
        key: 'getEducationData',
        value: function getEducationData(regionIds) {

            return this.getData(this.educationUrl, regionIds);
        }
    }, {
        key: 'getGdpData',
        value: function getGdpData(regionIds) {

            return this.getData(this.gdpUrl, regionIds);
        }
    }, {
        key: 'getMetrosInState',
        value: function getMetrosInState(stateId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.mostPopulousRegionTypeUrl.format(stateId, 'msa', limit));
        }
    }, {
        key: 'getOccupationsByPlace',
        value: function getOccupationsByPlace(occupation) {

            return d3.promise.json(this.occupationsByPlaceUrl.format(occupation));
        }
    }, {
        key: 'getOccupationsData',
        value: function getOccupationsData(regionIds) {

            return this.getData(this.occupationsUrl, regionIds);
        }
    }, {
        key: 'getParentState',
        value: function getParentState(region) {

            return d3.promise.json(this.parentStateUrl.format(region.id));
        }
    }, {
        key: 'getPlaceFromRoster',
        value: function getPlaceFromRoster(regionId) {

            return d3.promise.json(this.placeFromRosterUrl.format(regionId));
        }
    }, {
        key: 'getPopulationData',
        value: function getPopulationData(regionIds) {

            return this.getData(this.populationUrl, regionIds);
        }
    }, {
        key: 'getPlaces',
        value: function getPlaces() {

            return d3.promise.json(this.placesUrl);
        }
    }, {
        key: 'getSimilarRegions',
        value: function getSimilarRegions(regionId, vectors) {

            return d3.promise.json(this.similarRegionsUrl.format(regionId, vectors.join(',')));
        }
    }, {
        key: 'getSupportedVectors',
        value: function getSupportedVectors(regionId) {

            return d3.promise.json(this.supportedVectorsUrls.format(regionId));
        }

        // health data retrievers

    }, {
        key: 'getHealthRwjfChrData',
        value: function getHealthRwjfChrData(regionIds) {
            return this.getData(this.healthDataUrls.rwjf_county_health_rankings_2015, regionIds);
        }
    }]);

    return ApiController;
})();
'use strict';

var Constants = {
    ROSTER_URL: 'https://federal.demo.socrata.com/resource/7g2b-8brv.json',

    // maximum number of results from Socrata
    LIMIT: 50000
};
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RegionLookup = (function () {
    function RegionLookup() {
        _classCallCheck(this, RegionLookup);
    }

    _createClass(RegionLookup, null, [{
        key: 'get',
        value: function get(params) {
            return $.getJSON(Constants.ROSTER_URL + '?' + $.param(params));
        }
    }, {
        key: 'getOne',
        value: function getOne(params) {
            function selectRegion(regions) {
                if (regions.length === 0) {
                    console.warn('no regions found for params: ');
                    console.warn(params);
                    return null;
                } else if (regions.length === 1) {
                    return regions[0];
                } else {
                    var places = _.filter(regions, function (region) {
                        return region.type === 'place';
                    });

                    if (places.length > 0) {
                        return places[0];
                    } else {
                        return regions[0];
                    }
                }
            }

            return new Promise(function (resolve, reject) {
                RegionLookup.get(params).then(function (regions) {
                    resolve(selectRegion(regions));
                }, function (error) {
                    throw error;
                });
            });
        }
    }, {
        key: 'byName',
        value: function byName(name) {
            return RegionLookup.getOne({ name: name });
        }
    }, {
        key: 'byID',
        value: function byID(id) {
            return RegionLookup.getOne({ id: id });
        }
    }, {
        key: 'byAutocompleteName',
        value: function byAutocompleteName(name) {
            return RegionLookup.getOne({ autocomplete_name: name });
        }
    }]);

    return RegionLookup;
})();
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Complete = (function () {
    function Complete(queryBuilder, results) {
        _classCallCheck(this, Complete);

        this.queryBuilder = queryBuilder;
        this.results = results;
    }

    _createClass(Complete, [{
        key: 'get',
        value: function get(query) {
            if (query === '') {
                return [];
            } else {
                this.results.handle($.getJSON(this.queryBuilder(query)));
            }
        }
    }]);

    return Complete;
})();

var Results = (function () {
    function Results(type, resultSelection, onSelect) {
        _classCallCheck(this, Results);

        this.type = type;
        this.onSelect = onSelect;

        this.container = resultSelection.append('div').attr('class', 'autocomplete-results-container').style('display', 'none');

        this.title = this.container.append('p').attr('class', 'autocomplete-results-title').text(this.type);

        this.results = this.container.append('div').attr('class', 'autocomplete-results');
    }

    _createClass(Results, [{
        key: 'hide',
        value: function hide() {
            this.container.style('display', 'none');
        }
    }, {
        key: 'unhide',
        value: function unhide() {
            this.container.style('display', 'block');
        }
    }, {
        key: 'empty',
        value: function empty() {
            this.results.html('');
        }
    }, {
        key: 'handle',
        value: function handle(resultsPromise) {
            var _this = this;

            var success = function success(results) {
                _this.empty();

                var options = results.options;
                if (options.length === 0) {
                    _this.hide();
                } else {
                    _this.unhide();
                    _this.show(options);
                }
            };

            var failure = function failure(error) {
                throw error;
            };

            resultsPromise.then(success, failure);
        }
    }, {
        key: 'show',
        value: function show(options) {
            var _this2 = this;

            this.results.selectAll('li').data(options).enter().append('li').html(function (option) {
                return option.text;
            }).on('mouseover', function () {
                d3.select(this).classed('selected', true);
            }).on('mouseout', function () {
                d3.select(this).classed('selected', false);
            }).on('click', function (option) {
                _this2.onSelect(option.text);
            });
        }
    }]);

    return Results;
})();

var AutoSuggestRegionController = (function () {
    function AutoSuggestRegionController(inputSelection, resultSelection, completers) {
        _classCallCheck(this, AutoSuggestRegionController);

        this.inputSelection = inputSelection;
        this.resultSelection = resultSelection;
        this.completers = completers;
    }

    _createClass(AutoSuggestRegionController, [{
        key: 'listen',
        value: function listen() {
            var self = this;
            self.inputSelection.on('input', function () {
                self.suggest(this.value);
            });
        }
    }, {
        key: 'navigate',
        value: function navigate(path) {
            window.location.href = path;
        }
    }, {
        key: 'suggest',
        value: function suggest(term) {
            if (term === '') {
                this.resultSelection.style('display', 'none');
            } else {
                this.resultSelection.style('display', 'block');

                this.completers.forEach(function (completer) {
                    completer.get(term);
                });
            }
        }
    }]);

    return AutoSuggestRegionController;
})();
'use strict';

// Autocomplete on datasets, regions, publishers, and categories.
function multiComplete(inputSelector, resultSelector) {
    function autocompleteURL(domain, fxf, column) {
        return function (query) {
            return 'https://' + domain + '/views/' + fxf + '/columns/' + column + '/suggest/' + query + '?size=5';
        };
    }

    function navigate(path) {
        window.location.href = path;
    }

    var domain = 'odn.data.socrata.com';
    var inputSelection = d3.select(inputSelector);
    var resultSelection = d3.select(resultSelector);

    var datasetURL = autocompleteURL(domain, 'fpum-bjbr', 'name');
    var datasetSelect = function datasetSelect(dataset) {
        return navigate('/search?q=' + dataset);
    };
    var datasetResults = new Results('Datasets', resultSelection, datasetSelect);
    var datasetComplete = new Complete(datasetURL, datasetResults);

    var regionURL = autocompleteURL(domain, '7g2b-8brv', 'autocomplete_name');
    var regionSelect = function regionSelect(region) {
        return navigate('/' + region.replace(/ /g, '_'));
    };
    var regionResults = new Results('Regions', resultSelection, regionSelect);
    var regionComplete = new Complete(regionURL, regionResults);

    var publisherURL = autocompleteURL(domain, '8ae5-ghum', 'domain');
    var publisherSelect = function publisherSelect(publisher) {
        return navigate('/search?domains=' + publisher);
    };
    var publisherResults = new Results('Publishers', resultSelection, publisherSelect);
    var publisherComplete = new Complete(publisherURL, publisherResults);

    var categoryURL = autocompleteURL(domain, '864v-r7tf', 'category');
    var categorySelect = function categorySelect(category) {
        return navigate('/search?categories=' + category);
    };
    var categoryResults = new Results('Categories', resultSelection, categorySelect);
    var categoryComplete = new Complete(categoryURL, categoryResults);

    var completers = [datasetComplete, regionComplete, publisherComplete, categoryComplete];

    return new AutoSuggestRegionController(inputSelection, resultSelection, completers);
}
'use strict';

// Autocomplete to regions with data for the given source.
var sourceComplete = (function () {
    var domain = 'odn.data.socrata.com';
    var fxf = 'pfgp-ifph';

    var nameToColumn = new Map();
    nameToColumn.set('population', 'population');
    nameToColumn.set('earnings', 'earnings');
    nameToColumn.set('education', 'education');
    nameToColumn.set('occupations', 'occupations');
    nameToColumn.set('cost_of_living', 'rpp');
    nameToColumn.set('gdp', 'gdp');

    var defaultColumn = 'population';

    function urlFor(column) {
        return function (query) {
            return 'https://' + domain + '/views/' + fxf + '/columns/' + column + '/suggest/' + query + '?size=5';
        };
    }

    function navigate(path) {
        window.location.href = path;
    }

    return function (inputSelector, resultSelector, name, select) {
        var inputSelection = d3.select(inputSelector);
        var resultSelection = d3.select(resultSelector);

        var column = nameToColumn.has(name) ? nameToColumn.get(name) : defaultColumn;
        var url = urlFor(column);
        var results = new Results('Regions with Data', resultSelection, select);
        var complete = new Complete(url, results);

        return new AutoSuggestRegionController(inputSelection, resultSelection, [complete]);
    };
})();
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Scale = (function () {
    function Scale(values, range, scale) {
        _classCallCheck(this, Scale);

        this.values = values;
        this.range = range;
        this.scale = scale;
    }

    _createClass(Scale, null, [{
        key: "quantile",
        value: function quantile(values, range) {
            values.sort(d3.ascending);

            var step = 1.0 / range.length;
            var domain = _.map(range.slice(1), function (value, index) {
                return d3.quantile(values, (index + 1) * step);
            });

            var scale = d3.scale.quantile().domain(domain).range(range);

            return new Scale(values, range, scale);
        }
    }]);

    return Scale;
})();
'use strict';

var MapConstants = {
    // Same base layer as Data Lens
    BASE_LAYER_URL: 'https://a.tiles.mapbox.com/v3/socrata-apps.ibp0l899/{z}/{x}/{y}.png',
    BASE_LAYER: {
        opacity: 0.15 // Change to 0.15 to make the maps look like Data Lens
    },

    // See http://bl.ocks.org/mbostock/5577023 for a visual index of Color Brewer colors
    COLOR_SCALE: colorbrewer.RdYlBu[9],
    SCALE: Scale.quantile,

    // Leaflet map options:
    // http://leafletjs.com/reference.html#map-class
    MAP_OPTIONS: {
        minZoom: 3.0,
        maxZoom: 12.0,
        zoomControl: false,
        attributionControl: false
    },

    INITIAL_CENTER: [37.1669, -95.9669], // Center of US
    INITIAL_ZOOM: 4.0,

    REGION_BORDER_COLOR: '#34495e',
    REGION_BORDER_WEIGHT: 1,
    REGION_FILL_OPACITY: 1,

    REFERENCE_BORDER_COLOR: '#2c3e50',
    REFERENCE_BORDER_WEIGHT: 2,

    LOADING_TOOLTIP_NAME: 'Loading',

    GAZETTEER_URL: 'https://federal.demo.socrata.com/resource/gm3u-gw57.json',
    ROSTER_URL: 'https://federal.demo.socrata.com/resource/7g2b-8brv.json',

    TOPOJSON_DIRECTORY: '/geo/',
    TOPOJSON_SUFFIX: '.topo.json',

    REGIONS: {
        nation: { name: 'USA', id: 'nation', topo: 'nation' },
        region: { name: 'Regions', id: 'region', topo: 'region' },
        division: { name: 'Divisions', id: 'division', topo: 'division' },
        state: { name: 'States', id: 'state', topo: 'state' },
        county: { name: 'Counties', id: 'county', topo: 'county' },
        msa: { name: 'Metros', id: 'msa', topo: 'cbsa' },
        place: { name: 'Cities', id: 'place', topo: 'state' }
    }
};
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TopoModel = (function () {
    function TopoModel() {
        _classCallCheck(this, TopoModel);
    }

    _createClass(TopoModel, null, [{
        key: 'get',
        value: function get(region) {
            var url = MapConstants.TOPOJSON_DIRECTORY + region.topo + MapConstants.TOPOJSON_SUFFIX;

            return $.getJSON(url);
        }
    }]);

    return TopoModel;
})();

var MapModel = (function () {
    function MapModel(source, region, variable, year, regions) {
        _classCallCheck(this, MapModel);

        this.source = source;
        this.region = region;
        this.variable = variable;
        this.year = year;
        this.regions = regions;
        this.regionById = MapModel.makeLookup(regions, function (region) {
            return region.id;
        });
    }

    _createClass(MapModel, [{
        key: 'values',
        value: function values() {
            return this.regions.map(function (region) {
                return region.value;
            });
        }
    }, {
        key: 'scale',
        value: function scale(scaleFunction, range) {
            if (this.variable.reverse || false) range.reverse();

            return scaleFunction(this.values(), range);
        }
    }], [{
        key: 'makeLookup',
        value: function makeLookup(list, key) {
            var lookup = new Map();
            _.each(list, function (element) {
                return lookup.set(key(element), element);
            });
            return lookup;
        }
    }, {
        key: 'create',
        value: function create(source, region, variable, year) {
            var idColumn = source.idColumn || 'id';
            var typeColumn = source.typeColumn || 'type';
            var nameColumn = source.nameColumn || 'name';
            var yearColumn = source.yearColumn || 'year';

            return new Promise(function (resolve, reject) {
                var baseColumns = [idColumn, typeColumn, nameColumn, yearColumn];
                var columns = baseColumns.concat([variable.column]);
                var baseParams = _defineProperty({
                    'type': region.id,
                    '$select': columns.join(),
                    '$limit': Constants.LIMIT
                }, yearColumn, year);

                var params = _.extend({}, baseParams, variable.params);
                var url = 'https://' + source.domain + '/resource/' + source.fxf + '.json?' + $.param(params);

                function success(results) {
                    var regions = results.map(function (region) {
                        var value = variable.value(region[variable.column]);

                        return {
                            id: region.id,
                            type: region.type,
                            name: region.name,
                            value: value,
                            valueName: variable.name,
                            valueFormatted: variable.format(value),
                            year: year
                        };
                    });

                    resolve(new MapModel(source, region, variable, year, regions));
                }

                function failure(error) {
                    throw error;
                }

                $.getJSON(url).then(success, failure);
            });
        }
    }]);

    return MapModel;
})();
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MapView = (function () {
    function MapView(model, topoLayers, legend, tooltip) {
        _classCallCheck(this, MapView);

        this.model = model;
        this.scale = model.scale(MapConstants.SCALE, MapConstants.COLOR_SCALE);
        this.topoLayers = topoLayers;
        this.legend = legend;
        this.tooltip = tooltip;
    }

    _createClass(MapView, [{
        key: "display",
        value: function display() {
            this.updateLayers();
            this.updateLegend();
        }
    }, {
        key: "updateLegend",
        value: function updateLegend() {
            this.legend.update(this.scale, this.model.variable, this.model.year);
        }
    }, {
        key: "updateLayers",
        value: function updateLayers() {
            var _this = this;

            var styleLayer = function styleLayer(layer) {
                var id = layer.feature.id;

                if (_this.model.regionById.has(id)) {
                    (function () {
                        var region = _this.model.regionById.get(id);

                        var style = {
                            stroke: true,
                            color: MapConstants.REGION_BORDER_COLOR,
                            weight: MapConstants.REGION_BORDER_WEIGHT,
                            fillColor: _this.scale.scale(region.value),
                            fillOpacity: MapConstants.REGION_FILL_OPACITY
                        };

                        var events = {
                            mouseover: function mouseover() {
                                return _this.tooltip.showRegion(region);
                            },
                            mouseout: function mouseout() {
                                return _this.tooltip.hide();
                            }
                        };

                        layer.setStyle(style);
                        layer.on(events);
                    })();
                } else {
                    // if we don't have data for it it's reference layer
                    var style = {
                        stroke: true,
                        color: MapConstants.REFERENCE_BORDER_COLOR,
                        weight: MapConstants.REFERENCE_BORDER_WEIGHT,
                        fill: false,
                        clickable: false
                    };

                    layer.setStyle(style);
                }
            };

            this.topoLayers.eachLayer(styleLayer);
        }
    }]);

    return MapView;
})();
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MapContainer = (function () {
    function MapContainer(selection, source, region, topology) {
        var _this = this;

        _classCallCheck(this, MapContainer);

        this.selection = selection;
        this.source = source;
        this.region = region;

        this.topology = topology;
        this.topoLayer = omnivore.topojson.parse(topology);

        this.legend = new LegendControl();
        this.tooltip = new TooltipControl();

        var callback = function callback(variable, year) {
            _this.display(variable, year);
        };

        this.variableControl = new VariableControl(source.variables, callback);

        this.map = this.createMap();
    }

    _createClass(MapContainer, [{
        key: 'createMap',
        value: function createMap() {
            var id = 'leaflet-map';
            var container = this.selection.append('div').attr('class', 'map-container').attr('id', id);

            var map = L.map(id, MapConstants.MAP_OPTIONS);
            map.setView(MapConstants.INITIAL_CENTER, MapConstants.INITIAL_ZOOM);

            var baseLayer = L.tileLayer(MapConstants.BASE_LAYER_URL, MapConstants.BASE_LAYER);
            map.addLayer(baseLayer);

            map.addControl(this.legend);
            map.addControl(this.tooltip);
            map.addControl(this.variableControl);

            map.addLayer(this.topoLayer);

            return map;
        }
    }, {
        key: 'display',
        value: function display(variable, year) {
            var _this2 = this;

            MapModel.create(this.source, this.region, variable, year).then(function (model) {
                var view = new MapView(model, _this2.topoLayer, _this2.legend, _this2.tooltip);
                view.display();
            }, function (error) {
                throw error;
            });
        }
    }], [{
        key: 'create',
        value: function create(selector, source, region) {
            return new Promise(function (resolve, reject) {
                TopoModel.get(region).then(function (topology) {
                    var selection = d3.select(selector);

                    resolve(new MapContainer(selection, source, region, topology));
                }, reject);
            });
        }
    }]);

    return MapContainer;
})();
'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

var LegendControl = L.Control.extend({
    options: {
        position: 'bottomleft'
    },

    onAdd: function onAdd(map) {
        var container = L.DomUtil.create('div', 'legend-container');
        this.container = d3.select(container);
        return container;
    },

    update: function update(scale, variable, year) {
        this.container.selectAll('*').remove();

        var legendContainer = this.container.append('div').attr('class', 'legend-container');

        var dimension = 10;
        var range = scale.range.slice();
        range.reverse();
        var height = range.length * dimension;
        var width = 200;
        var xOffset = width / 2;

        var values = _.filter(scale.values, function (value) {
            return !isNaN(value);
        });

        var _d3$extent = d3.extent(values);

        var _d3$extent2 = _slicedToArray(_d3$extent, 2);

        var min = _d3$extent2[0];
        var max = _d3$extent2[1];

        var lowerQuartile = d3.quantile(values, 0.25);
        var median = d3.median(values);
        var upperQuartile = d3.quantile(values, 0.75);

        var tickValues = [max, upperQuartile, median, lowerQuartile, min];
        var tickNames = ['maximum', 'upper quartile', 'median', 'lower quartile', 'minimum'];
        var tickData = _.zip(tickValues, tickNames);
        var tickStep = height / (tickData.length - 1);

        var legend = legendContainer.append('svg').attr('width', width).attr('height', height + 30 + dimension * 3).attr('class', 'legend');

        var legendName = legend.append('text').attr('class', 'legend-name').attr('text-anchor', 'middle').attr('x', xOffset + dimension / 2).attr('y', dimension * 1.2).text(variable.name + ' (' + year + ')');

        var tickGroup = legend.append('g').attr('class', 'ticks');

        var ticks = tickGroup.selectAll('g.tick').data(tickData).enter().append('g').attr('class', 'tick').attr('transform', function (__, index) {
            return 'translate(' + xOffset + ', ' + (3 * dimension + index * tickStep) + ')';
        });

        ticks.append('line').attr('class', 'tick-line').attr('x1', dimension).attr('y1', 0).attr('x2', dimension * 2).attr('y2', 0);

        ticks.append('line').attr('class', 'tick-line').attr('x1', -dimension).attr('y1', 0).attr('x2', 0).attr('y2', 0);

        var baseline = 'middle';
        var padding = 2;

        ticks.append('text').attr('class', 'tick-value').text(function (tick) {
            return variable.format(tick[0]);
        }).attr('alignment-baseline', baseline).attr('transform', 'translate(' + (dimension * 2 + padding) + ', 0)');

        ticks.append('text').attr('class', 'tick-label').text(function (tick) {
            return tick[1];
        }).attr('text-anchor', 'end').attr('alignment-baseline', baseline).attr('transform', 'translate(' + -(dimension + padding) + ', 0)');

        var colors = legend.selectAll('rect').data(range).enter().append('rect').attr('class', 'legend-element').attr('x', xOffset).attr('y', function (__, index) {
            return (index + 3) * dimension;
        }).attr('width', dimension).attr('height', dimension).style('stroke', 'none').style('fill', function (color) {
            return color;
        });

        legend.append('rect').attr('class', 'legend-box').attr('x', xOffset).attr('y', dimension * 3).attr('width', dimension).attr('height', height);
    }
});
'use strict';

var TooltipControl = L.Control.extend({
    options: {
        position: 'topright'
    },

    onAdd: function onAdd(map) {
        var containerDiv = L.DomUtil.create('div', 'tooltip');
        this.container = d3.select(containerDiv).style('display', 'none');

        this.name = this.container.append('div').attr('class', 'name');

        this.value = this.container.append('div').attr('class', 'value');

        return containerDiv;
    },

    show: function show(name, value) {
        this.name.text(name);
        this.value.text(value);

        this.unhide();
    },

    showRegion: function showRegion(region) {
        this.show(region.name, region.valueName + ' (' + region.year + '): ' + region.valueFormatted);
    },

    hide: function hide() {
        this.container.style('display', 'none');
    },

    unhide: function unhide() {
        this.container.style('display', 'inline');
    }
});
'use strict';

var VariableControl = L.Control.extend({
    initialize: function initialize(variables, callback) {
        this.variables = variables;
        this.callback = callback;
    },

    options: {
        position: 'topleft'
    },

    onAdd: function onAdd(map) {
        var _this = this;

        var container = L.DomUtil.create('div', 'variable-container');
        this.container = d3.select(container);

        var currentVariable = this.variables[0];
        var currentYear = currentVariable.years[currentVariable.years.length - 1];

        var update = function update() {
            _this.callback(currentVariable, currentYear);
        };

        update();

        function optionDatum(select) {
            var value = select.property('value');
            var option = select.select('option[value=\'' + value + '\']');
            return option.datum();
        }

        var variableSelect = this.container.append('select').attr('class', 'variable-select').on('change', function () {
            currentVariable = optionDatum(variableSelect);
            updateYearOptions();
            update();
        });

        var variableOptions = variableSelect.selectAll('option').data(this.variables).enter().append('option').property('selected', function (variable) {
            return variable === currentVariable;
        }).attr('value', function (variable) {
            return variable.name;
        }).text(function (variable) {
            return variable.name;
        });

        var yearSelect = this.container.append('select').attr('class', 'year-select').on('change', function () {
            currentYear = optionDatum(yearSelect);
            update();
        });

        function updateYearOptions() {
            yearSelect.selectAll('option').remove();

            if (!_.contains(currentVariable.years, currentYear)) currentYear = currentVariable.years[currentVariable.years.length - 1];

            yearSelect.selectAll('option').data(currentVariable.years).enter().append('option').property('selected', function (year) {
                return year === currentYear;
            }).attr('value', function (year) {
                return year;
            }).text(function (year) {
                return year;
            });
        }

        updateYearOptions();

        return container;
    }
});
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchPageController = (function () {
    function SearchPageController(params) {
        _classCallCheck(this, SearchPageController);

        this.MAP_COLOR_SCALE = colorbrewer.RdYlBu[9], this.MAP_INITIAL_ZOOM = 10.0;
        this.MAP_RADIUS_SCALE = [500, 2000];

        this.params = params;
        this.fetching = false;
        this.fetchedAll = false;
        this.mostSimilar = [];

        var self = this;

        // Refine menus
        //
        $('.refine-link').mouseenter(function () {

            $(this).addClass('refine-link-selected');
            $(this).children('span').children('i').removeClass('fa-caret-down').addClass('fa-caret-up');
            $(this).children('ul').slideDown(100);
        });

        $('.refine-link').mouseleave(function () {

            $(this).removeClass('refine-link-selected');
            $(this).children('span').children('i').removeClass('fa-caret-up').addClass('fa-caret-down');
            $(this).children('ul').slideUp(100);
        });

        // Categories
        //
        this.attachCategoriesClickHandlers();

        $('#refine-menu-categories-view-more').click(function () {

            var controller = new ApiController();

            controller.getCategories().then(function (data) {

                var rg = data.results.map(function (result) {
                    return '<li><i class="fa ' + result.metadata.icon + '"></i>' + result.category + '</li>';
                });

                var s = rg.join('');

                $('#refine-menu-categories').html(s);
                self.attachCategoriesClickHandlers();
            }).catch(function (error) {
                return console.error(error);
            });
        });

        // Domains
        //
        this.attachDomainsClickHandlers();

        $('#refine-menu-domains-view-more').click(function () {

            var controller = new ApiController();

            controller.getDomains().then(function (data) {

                var rg = data.results.map(function (result) {
                    return '<li>' + result.domain + '</li>';
                });

                var s = rg.join('');

                $('#refine-menu-domains').html(s);
                self.attachDomainsClickHandlers();
            }).catch(function (error) {
                return console.error(error);
            });
        });

        // Standards
        //
        this.attachStandardsClickHandlers();

        // Tokens
        //
        $('.region-token .fa-times-circle').click(function () {

            self.removeRegion($(this).parent().index());
            self.navigate();
        });

        $('.category-token .fa-times-circle').click(function () {

            self.toggleCategory($(this).parent().text().toLowerCase().trim());
            self.navigate();
        });

        $('.domain-token .fa-times-circle').click(function () {

            self.toggleDomain($(this).parent().text().toLowerCase().trim());
            self.navigate();
        });

        $('.standard-token .fa-times-circle').click(function () {

            self.toggleStandard($(this).parent().text().toLowerCase().trim());
            self.navigate();
        });

        // Infinite scroll search results
        //
        $(window).on('scroll', function () {

            var bottomOffsetToBeginRequest = 1000;

            if ($(window).scrollTop() >= $(document).height() - $(window).height() - bottomOffsetToBeginRequest) {
                self.fetchNextPage();
            }
        }).scroll();

        // Add location
        //
        function selectRegion(autocompleteName) {
            RegionLookup.byAutocompleteName(autocompleteName).then(function (region) {
                self.setAutoSuggestedRegion(region.name, false);
                self.navigate();
            }, function (error) {
                throw error;
            });
        }

        sourceComplete('.add-region-input', '.add-region-results', this.params.vector, selectRegion).listen();

        $('.add-region .fa-plus').click(function () {

            $('.add-region input[type="text"]').focus();
        });

        // Similar regions
        //
        this.drawSimilarRegions(function (region) {

            self.setAutoSuggestedRegion(region, false);
            self.navigate();
        });

        // Places in region
        //
        this.drawPlacesInRegion();
    }

    // Public methods
    //

    _createClass(SearchPageController, [{
        key: 'attachCategoriesClickHandlers',
        value: function attachCategoriesClickHandlers() {

            var self = this;

            $('#refine-menu-categories li:not(.refine-view-more)').click(function () {

                self.toggleCategory($(this).text().toLowerCase().trim());
                self.navigate();
            });
        }
    }, {
        key: 'attachDomainsClickHandlers',
        value: function attachDomainsClickHandlers() {

            var self = this;

            $('#refine-menu-domains li:not(.refine-view-more)').click(function () {

                var domain = $(this).text().toLowerCase().trim();

                self.toggleDomain(domain);
                self.navigate();
            });
        }
    }, {
        key: 'attachStandardsClickHandlers',
        value: function attachStandardsClickHandlers() {

            var self = this;

            $('#refine-menu-standards li').click(function () {

                var standard = $(this).text().toLowerCase().trim();

                self.toggleStandard(standard);
                self.navigate();
            });
        }
    }, {
        key: 'decrementPage',
        value: function decrementPage() {

            this.params.page--;
        }

        // Cost of living
        //

    }, {
        key: 'drawCostOfLivingData',
        value: function drawCostOfLivingData() {
            var _this = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getCostOfLivingData(regionIds).then(function (data) {

                    _this.drawCostOfLivingChart(regionIds, data);
                    _this.drawCostOfLivingTable(regionIds, data);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawCostOfLivingChart',
        value: function drawCostOfLivingChart(regionIds, data) {

            this.drawCostOfLivingChartForComponent('cost-of-living-all-chart', 'All', regionIds, data);
            this.drawCostOfLivingChartForComponent('cost-of-living-goods-chart', 'Goods', regionIds, data);
            this.drawCostOfLivingChartForComponent('cost-of-living-rents-chart', 'Rents', regionIds, data);
            this.drawCostOfLivingChartForComponent('cost-of-living-other-chart', 'Other', regionIds, data);
        }
    }, {
        key: 'drawCostOfLivingChartForComponent',
        value: function drawCostOfLivingChartForComponent(id, component, regionIds, data) {

            var chartData = [];

            // Header
            //
            var header = ['Year'];

            for (var i = 0; i < regionIds.length; i++) {
                header[i + 1] = this.params.regions[i].name;
            }

            chartData.push(header);

            // Format the data
            //
            var o = {};

            for (var i = 0; i < data.length; i++) {

                if (data[i].component != component) continue;

                if (o[data[i].year] == undefined) {
                    o[data[i].year] = [data[i].year];
                }

                o[data[i].year].push(parseFloat(data[i].index));
            }

            for (var key in o) {
                chartData.push(o[key]);
            }

            this.drawLineChart(id, chartData, {

                curveType: 'function',
                legend: { position: 'bottom' },
                pointShape: 'square',
                pointSize: 8,
                title: component
            });
        }
    }, {
        key: 'drawCostOfLivingTable',
        value: function drawCostOfLivingTable(regionIds, data) {

            // Format the data
            //
            var components = ['All', 'Goods', 'Other', 'Rents'];
            var rows = [];

            for (var i = 0; i < components.length; i++) {

                var component = components[i];
                var row = [component];

                for (var j = 0; j < regionIds.length; j++) {

                    var o = this.getLatestCostOfLiving(data, regionIds[j], component);

                    row.push({
                        index: o != null ? parseFloat(o.index) : 'NA',
                        percentile: o != null ? this.getPercentile(o.rank, o.total_ranks) : 'NA'
                    });
                }

                rows.push(row);
            }

            // Header
            //
            var s = '<tr><th></th>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<th colspan=\'2\'>' + this.params.regions[i].name + '</th>';
            }

            // Sub header
            //
            s += '</tr><tr><td class=\'column-header\'></td>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<td class=\'column-header\'>Value</td><td class=\'column-header\'>Percentile</td>';
            }

            s += '</tr>';

            for (var i = 0; i < rows.length; i++) {

                var row = rows[i];

                s += '<tr>';
                s += '<td>' + row[0] + '</td>';

                for (var j = 1; j < row.length; j++) {

                    s += '<td>' + row[j].index + '</td>';
                    s += '<td>' + row[j].percentile + '</td>';
                }

                s += '</tr>';
            }

            $('#cost-of-living-table').html(s);
        }
    }, {
        key: 'getPercentile',
        value: function getPercentile(rank, totalRanks) {

            var totalRanks = parseInt(totalRanks);
            var rank = parseInt(rank);
            var percentile = parseInt((totalRanks - rank) / totalRanks * 100);

            return numeral(percentile).format('0o');
        }
    }, {
        key: 'getLatestCostOfLiving',
        value: function getLatestCostOfLiving(data, regionId, component) {

            var datum = null;

            for (var i = 0; i < data.length; i++) {

                if (data[i].id != regionId) continue;

                if (data[i].component != component) continue;

                if (datum == null) {

                    datum = data[i];
                    continue;
                }

                if (parseInt(data[i].year) <= parseInt(datum.year)) continue;

                datum = data[i];
            }

            return datum;
        }

        // Earnings
        //

    }, {
        key: 'drawEarningsData',
        value: function drawEarningsData() {
            var _this2 = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this2.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getEarningsData(regionIds).then(function (data) {
                    _this2.drawEarningsMap();
                    _this2.drawEarningsChart(regionIds, data);
                    _this2.drawEarningsTable(regionIds, data);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawEarningsChart',
        value: function drawEarningsChart(regionIds, data) {

            var earnings = [];

            // Header
            //
            var header = ['Education Level'];

            for (var i = 0; i < regionIds.length; i++) {
                header[i + 1] = this.params.regions[i].name;
            }

            earnings.push(header);

            // Less than high school
            //
            var someHighSchoolEarnings = ['Some High School'];

            for (var i = 0; i < regionIds.length; i++) {
                someHighSchoolEarnings[i + 1] = parseInt(data[i].median_earnings_less_than_high_school);
            }

            earnings.push(someHighSchoolEarnings);

            // High school
            //
            var highSchoolEarnings = ['High School'];

            for (var i = 0; i < regionIds.length; i++) {
                highSchoolEarnings[i + 1] = parseInt(data[i].median_earnings_high_school);
            }

            earnings.push(highSchoolEarnings);

            // Some college
            //
            var someCollegeEarnings = ['Some College'];

            for (var i = 0; i < regionIds.length; i++) {
                someCollegeEarnings[i + 1] = parseInt(data[i].median_earnings_some_college_or_associates);
            }

            earnings.push(someCollegeEarnings);

            // Bachelor's
            //
            var bachelorsEarnings = ['Bachelor\'s'];

            for (var i = 0; i < regionIds.length; i++) {
                bachelorsEarnings[i + 1] = parseInt(data[i].median_earnings_bachelor_degree);
            }

            earnings.push(bachelorsEarnings);

            // Graduate degree
            //
            var graduateDegreeEarnings = ['Graduate Degree'];

            for (var i = 0; i < regionIds.length; i++) {
                graduateDegreeEarnings[i + 1] = parseInt(data[i].median_earnings_graduate_or_professional_degree);
            }

            earnings.push(graduateDegreeEarnings);

            this.drawSteppedAreaChart('earnings-chart', earnings, {

                areaOpacity: 0,
                connectSteps: true,
                curveType: 'function',
                focusTarget: 'category',
                legend: { position: 'bottom' },
                title: 'Earnings by Education Level',
                vAxis: { format: 'currency' }
            });
        }
    }, {
        key: 'drawEarningsMap',
        value: function drawEarningsMap() {
            var _this3 = this;

            var controller = new ApiController();
            var placesPromise = controller.getPlaces();
            var earningsPromise = controller.getEarningsByPlace();

            Promise.all([placesPromise, earningsPromise]).then(function (values) {

                var placesResponse = values[0];
                var earningsResponse = values[1];

                // Get the geo coordinates for each region
                //
                var regionPlaces = _this3.getPlacesForRegion(placesResponse);

                // Create a place lookup table
                //
                var placeMap = {};
                placesResponse.forEach(function (place) {
                    return placeMap[place.id] = place;
                }); // init the place map

                // Get map data
                //
                var earningsPlaces = [];

                earningsResponse.forEach(function (item) {

                    if (item.median_earnings == 0) return;

                    if (item.id in placeMap) {

                        earningsPlaces.push({
                            coordinates: placeMap[item.id].location.coordinates,
                            id: item.id,
                            name: item.name,
                            value: parseInt(item.median_earnings)
                        });
                    }
                });

                earningsPlaces.sort(function (a, b) {
                    return b.value - a.value;
                }); // desc
                var earnings = _.map(earningsPlaces, function (x) {
                    return x.value;
                });

                // Init map
                //
                var radiusScale = _this3.getRadiusScaleLinear(earnings);
                var colorScale = _this3.getColorScale(earnings);

                var coordinates = regionPlaces[0].location.coordinates;
                var center = [coordinates[1], coordinates[0]];
                var map = L.map('map', { zoomControl: true });

                L.tileLayer('https://a.tiles.mapbox.com/v3/socrata-apps.ibp0l899/{z}/{x}/{y}.png').addTo(map);
                map.setView(center, _this3.MAP_INITIAL_ZOOM);

                // Populate map
                //
                _this3.drawCirclesForPlaces(map, earningsPlaces, radiusScale, colorScale);
                _this3.drawMarkersForPlaces(map, regionPlaces);
            }).catch(function (error) {
                return console.error(error);
            });
        }
    }, {
        key: 'drawEarningsTable',
        value: function drawEarningsTable(regionIds, data) {

            var s = '<tr><th></th>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<th>' + this.params.regions[i].name + '</th>';
            }

            // Median earnings all
            //
            s += '</tr><tr><td>Median Earnings (All Workers)</td>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<td>' + numeral(data[i].median_earnings).format('$0,0') + '</td>';
            }

            // Median earnings female
            //
            s += '</tr><tr><td>Median Female Earnings (Full Time)</td>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<td>' + numeral(data[i].female_full_time_median_earnings).format('$0,0') + '</td>';
            }

            // Median earnings male
            //
            s += '</tr><tr><td>Median Male Earnings (Full Time)</td>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<td>' + numeral(data[i].male_full_time_median_earnings).format('$0,0') + '</td>';
            }

            s += '</tr>';

            $('#earnings-table').html(s);
        }

        // Health
        //

    }, {
        key: 'drawHealthData',
        value: function drawHealthData() {
            var _this4 = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this4.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getHealthRwjfChrData(regionIds).then(function (data) {
                    return _this4.drawRwjfChrTable(regionIds, data);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawRwjfChrTableRow',
        value: function drawRwjfChrTableRow(regionIds, data, first_td, var_label, var_key, fmt_str) {
            var addl_fmt = arguments.length <= 6 || arguments[6] === undefined ? '' : arguments[6];

            var s = '<tr>' + first_td + '<td class=\'align-left\'>' + var_label + '</td>';
            for (var i = 0; i < regionIds.length; i++) {
                s += '<td>';
                if (data[i] && data[i][var_key]) {
                    s += numeral(data[i][var_key].replace(',', '')).format(fmt_str) + addl_fmt;
                } else {
                    s += '';
                }
                s += '</td>';
            }
            s += '</tr>';
            return s;
        }
    }, {
        key: 'drawRwjfChrTable',
        value: function drawRwjfChrTable(regionIds, data) {

            var s = '';

            // first row, which is region names
            s += '<tr><th></th><th></th>';
            for (var i = 0; i < regionIds.length; i++) {
                s += '<th>' + this.params.regions[i].name + '</th>';
            }
            s += '</tr>';

            // HEALTH OUTCOMES
            s += '<tr><td colspan=' + numeral(regionIds.length) + 1 + '>HEALTH OUTCOMES</td></tr>';
            // health outcomes - length of life - 1 measure
            s += this.drawRwjfChrTableRow(regionIds, data, '<td rowspan=1>Length of Life</td>', 'Premature Death', 'premature_death_value', '0,0');
            // health outcomes - quality of life - 4 measures
            s += this.drawRwjfChrTableRow(regionIds, data, '<td rowspan=4>Quality of Life</td>', 'Poor or fair health', 'poor_or_fair_health_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Poor physical health days', 'poor_physical_health_days_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Poor mental health days', 'poor_mental_health_days_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Low birthweight', 'low_birthweight_value', '0.0%');

            // HEALTH FACTORS
            s += '<tr><td colspan=' + numeral(regionIds.length) + 1 + '>HEALTH FACTORS</td></tr>';
            // health outcomes - health factors - 9 measures
            s += this.drawRwjfChrTableRow(regionIds, data, '<td rowspan=9>Health Behaviors</td>', 'Adult smoking', 'adult_smoking_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Adult obesity', 'adult_obesity_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Food environment index', 'food_environment_index_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Physical inactivity', 'physical_inactivity_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Access to exercise opportunities', 'access_to_exercise_opportunities_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Excessive drinking', 'excessive_drinking_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Alcohol-impaired driving deaths', 'alcohol_impaired_driving_deaths_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Sexually transmitted infections', 'sexually_transmitted_infections_value', '0,0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Teen births', 'alcohol_impaired_driving_deaths_value', '0,0');
            // health outcomes - clinical care - 7 measures
            s += this.drawRwjfChrTableRow(regionIds, data, '<td rowspan=7>Clinical Care</td>', 'Uninsured', 'uninsured_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Primary care physicians', 'primary_care_physicians_value', '0,0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Dentists', 'dentists_value', '0,0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Mental health providers', 'mental_health_providers_value', '0,0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Preventable hospital stays', 'preventable_hospital_stays_value', '0,0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Diabetic monitoring', 'diabetic_screening_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Mammography screening', 'mammography_screening_value', '0.0%');

            // health outcomes - social and economic factors - 9 measures
            s += this.drawRwjfChrTableRow(regionIds, data, '<td rowspan=9>Social & Economic Factors</td>', 'High school graduation', 'high_school_graduation_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Some college', 'some_college_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Unemployment', 'unemployment_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Children in poverty', 'children_in_poverty_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Income inequality', 'income_inequality_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Children in single-parent households', 'children_in_single_parent_households_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Social associations', 'social_associations_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Violent crime', 'violent_crime_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Injury deaths', 'injury_deaths_value', '0.0');

            // health outcomes - physical environment - 5 measures
            s += this.drawRwjfChrTableRow(regionIds, data, '<td rowspan=5>Physical Environment</td>', 'Air pollution - particulate matter', 'air_pollution_particulate_matter_value', '0.0');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Drinking water violations', 'drinking_water_violations_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Severe housing problems', 'severe_housing_problems_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Driving alone to work', 'driving_alone_to_work_value', '0.0%');
            s += this.drawRwjfChrTableRow(regionIds, data, '', 'Long commute - driving alone', 'long_commute_driving_alone_value', '0.0%');

            $('#rwjf-county-health-rankings-table').html(s);
        }

        // Education
        //

    }, {
        key: 'drawEducationData',
        value: function drawEducationData() {
            var _this5 = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this5.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getEducationData(regionIds).then(function (data) {

                    _this5.drawEducationMap();
                    _this5.drawEducationTable(regionIds, data);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawEducationMap',
        value: function drawEducationMap() {
            var _this6 = this;

            var controller = new ApiController();
            var placesPromise = controller.getPlaces();
            var educationPromise = controller.getEducationByPlace();

            return Promise.all([placesPromise, educationPromise]).then(function (values) {

                var placesResponse = values[0];
                var educationResponse = values[1];

                // Get the geo coordinates for each region
                //
                var regionPlaces = _this6.getPlacesForRegion(placesResponse);

                // Create a place lookup table
                //
                var placeMap = {};
                placesResponse.forEach(function (place) {
                    return placeMap[place.id] = place;
                }); // init the place map

                // Get map data
                //
                var educationPlaces = [];

                educationResponse.forEach(function (item) {

                    if (item.percent_bachelors_degree_or_higher == 0) return;

                    if (item.id in placeMap) {

                        educationPlaces.push({
                            coordinates: placeMap[item.id].location.coordinates,
                            id: item.id,
                            name: item.name,
                            value: parseInt(item.percent_bachelors_degree_or_higher)
                        });
                    }
                });

                educationPlaces.sort(function (a, b) {
                    return b.value - a.value;
                }); // desc
                var earnings = _.map(educationPlaces, function (x) {
                    return x.value;
                });

                // Init map
                //
                var radiusScale = _this6.getRadiusScaleLinear(earnings);
                var colorScale = _this6.getColorScale(earnings);

                var coordinates = regionPlaces[0].location.coordinates;
                var center = [coordinates[1], coordinates[0]];
                var map = L.map('map', { zoomControl: true });

                L.tileLayer('https://a.tiles.mapbox.com/v3/socrata-apps.ibp0l899/{z}/{x}/{y}.png').addTo(map);
                map.setView(center, _this6.MAP_INITIAL_ZOOM);

                // Populate map
                //
                _this6.drawCirclesForPlaces(map, educationPlaces, radiusScale, colorScale);
                _this6.drawMarkersForPlaces(map, regionPlaces);
            }).catch(function (error) {
                return console.error(error);
            });
        }
    }, {
        key: 'drawEducationTable',
        value: function drawEducationTable(regionIds, data) {

            // Header
            //
            var s = '<tr><th></th>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<th colspan=\'2\'>' + this.params.regions[i].name + '</th>';
            }

            // Sub header
            //
            s += '</tr><tr><td class=\'column-header\'></td>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<td class=\'column-header\'>Percent</td><td class=\'column-header\'>Percentile</td>';
            }

            // At least bachelor's
            //
            s += '</tr><tr><td>At Least Bachelor\'s Degree</td>';

            for (var i = 0; i < regionIds.length; i++) {

                var totalRanks = parseInt(data[i].total_ranks);
                var rank = parseInt(data[i].percent_bachelors_degree_or_higher_rank);
                var percentile = parseInt((totalRanks - rank) / totalRanks * 100);

                s += '<td>' + data[i].percent_bachelors_degree_or_higher + '%</td>';
                s += '<td>' + numeral(percentile).format('0o') + '</td>';
            }

            // At least high school diploma
            //
            s += '</tr><tr><td>At Least High School Diploma</td>';

            for (var i = 0; i < regionIds.length; i++) {

                var totalRanks = parseInt(data[i].total_ranks);
                var rank = parseInt(data[i].percent_high_school_graduate_or_higher);
                var percentile = parseInt((totalRanks - rank) / totalRanks * 100);

                s += '<td>' + data[i].percent_high_school_graduate_or_higher + '%</td>';
                s += '<td>' + numeral(percentile).format('0o') + '</td>';
            }

            s += '</tr>';

            $('#education-table').html(s);
        }

        // GDP data
        //

    }, {
        key: 'drawGdpData',
        value: function drawGdpData() {
            var _this7 = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this7.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getGdpData(regionIds).then(function (data) {

                    _this7.drawGdpChart(regionIds, data);
                    _this7.drawGdpChangeChart(regionIds, data);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawGdpChart',
        value: function drawGdpChart(regionIds, data) {

            var chartData = [];

            // Header
            //
            var header = ['Year'];

            for (var i = 0; i < regionIds.length; i++) {
                header[i + 1] = this.params.regions[i].name;
            }

            chartData.push(header);

            // Format the data
            //
            var o = {};

            for (var i = 0; i < data.length; i++) {

                if (o[data[i].year] == undefined) {
                    o[data[i].year] = [data[i].year];
                }

                o[data[i].year].push(parseFloat(data[i].per_capita_gdp));
            }

            for (var key in o) {
                chartData.push(o[key]);
            }

            // Draw chart
            //
            this.drawLineChart('per-capita-gdp-chart', chartData, {

                curveType: 'function',
                legend: { position: 'bottom' },
                pointShape: 'square',
                pointSize: 8,
                title: 'Per Capita Real GDP over Time'
            });
        }
    }, {
        key: 'drawGdpChangeChart',
        value: function drawGdpChangeChart(regionIds, data) {

            var chartData = [];

            // Header
            //
            var header = ['Year'];

            for (var i = 0; i < regionIds.length; i++) {
                header[i + 1] = this.params.regions[i].name;
            }

            chartData.push(header);

            // Format the data
            //
            var o = {};

            for (var i = 0; i < data.length; i++) {

                if (o[data[i].year] == undefined) {
                    o[data[i].year] = [data[i].year];
                }

                o[data[i].year].push(parseFloat(data[i].per_capita_gdp_percent_change) / 100);
            }

            for (var key in o) {
                chartData.push(o[key]);
            }

            // Draw chart
            //
            this.drawLineChart('per-capita-gdp-change-chart', chartData, {

                curveType: 'function',
                legend: { position: 'bottom' },
                pointShape: 'square',
                pointSize: 8,
                title: 'Annual Change in Per Capita GDP over Time',
                vAxis: { format: '#.#%' }
            });
        }

        // Occupations
        //

    }, {
        key: 'drawOccupationsData',
        value: function drawOccupationsData() {
            var _this8 = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this8.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getOccupationsData(regionIds).then(function (data) {

                    _this8.drawOccupationsMap();
                    _this8.drawOccupationsTable(regionIds, data);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawOccupationsMap',
        value: function drawOccupationsMap() {
            var _this9 = this;

            var controller = new ApiController();
            var placesPromise = controller.getPlaces();
            var occupationsPromise = controller.getOccupationsByPlace('Management'); // TODO: take from the dropdown when we have it.

            Promise.all([placesPromise, occupationsPromise]).then(function (values) {

                var placesResponse = values[0];
                var occupationsResponse = values[1];

                // Get the geo coordinates for each region
                //
                var regionPlaces = _this9.getPlacesForRegion(placesResponse);

                // Create a place lookup table
                //
                var placeMap = {};
                placesResponse.forEach(function (place) {
                    return placeMap[place.id] = place;
                }); // init the place map

                // Get map data
                //
                var occupationsPlaces = [];

                occupationsResponse.forEach(function (item) {

                    if (item.percent_employed == 0) return;

                    if (item.id in placeMap) {

                        occupationsPlaces.push({
                            coordinates: placeMap[item.id].location.coordinates,
                            id: item.id,
                            name: item.name,
                            value: parseInt(item.percent_employed)
                        });
                    }
                });

                occupationsPlaces.sort(function (a, b) {
                    return b.value - a.value;
                }); // desc
                var earnings = _.map(occupationsPlaces, function (x) {
                    return x.value;
                });

                // Init map
                //
                var radiusScale = _this9.getRadiusScaleLinear(earnings);
                var colorScale = _this9.getColorScale(earnings);

                var coordinates = regionPlaces[0].location.coordinates;
                var center = [coordinates[1], coordinates[0]];
                var map = L.map('map', { zoomControl: true });

                L.tileLayer('https://a.tiles.mapbox.com/v3/socrata-apps.ibp0l899/{z}/{x}/{y}.png').addTo(map);
                map.setView(center, _this9.MAP_INITIAL_ZOOM);

                // Populate map
                //
                _this9.drawCirclesForPlaces(map, occupationsPlaces, radiusScale, colorScale);
                _this9.drawMarkersForPlaces(map, regionPlaces);
            }).catch(function (error) {
                return console.error(error);
            });
        }
    }, {
        key: 'drawOccupationsTable',
        value: function drawOccupationsTable(regionIds, data) {

            var s = '<tr><th></th>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<th colspan=\'2\'>' + this.params.regions[i].name + '</th>';
            }

            // Sub header
            //
            s += '</tr><tr><td class=\'column-header\'></td>';

            for (var i = 0; i < regionIds.length; i++) {
                s += '<td class=\'column-header\'>Percent</td><td class=\'column-header\'>Percentile</td>';
            }

            for (var i = 0; i < data.length; i++) {

                if (i % regionIds.length == 0) s += '</tr><tr><td>' + data[i].occupation + '</td>';

                var totalRanks = parseInt(data[i].total_ranks);
                var rank = parseInt(data[i].percent_employed_rank);
                var percentile = parseInt((totalRanks - rank) / totalRanks * 100);

                s += '<td>' + numeral(data[i].percent_employed).format('0.0') + '%</td>';
                s += '<td>' + numeral(percentile).format('0o') + '</td>';
            }

            s += '</tr>';

            $('#occupations-table').html(s);
        }

        // Population
        //

    }, {
        key: 'drawPopulationData',
        value: function drawPopulationData() {
            var _this10 = this;

            google.setOnLoadCallback(function () {

                var regionIds = _this10.params.regions.map(function (region) {
                    return region.id;
                });
                var controller = new ApiController();

                controller.getPopulationData(regionIds).then(function (data) {

                    _this10.drawPopulationMap();
                    _this10.drawPopulationChart(regionIds, data);
                    _this10.drawPopulationChangeChart(regionIds, data);
                }).catch(function (error) {
                    throw error;
                });
            });
        }
    }, {
        key: 'drawPopulationChart',
        value: function drawPopulationChart(regionIds, data) {

            var chartData = [];
            var year;

            // Header
            //
            var header = ['Year'];

            for (var i = 0; i < regionIds.length; i++) {
                header[i + 1] = this.params.regions[i].name;
            }

            chartData.push(header);

            // Data
            //
            for (var i = 0; i < data.length; i++) {

                var m = i % regionIds.length;

                if (m == 0) {

                    year = [];
                    year[0] = data[i].year;
                    chartData.push(year);
                }

                year[m + 1] = parseInt(data[i].population);
            }

            this.drawLineChart('population-chart', chartData, {

                curveType: 'function',
                legend: { position: 'bottom' },
                pointShape: 'square',
                pointSize: 8,
                title: 'Population'
            });
        }
    }, {
        key: 'drawPopulationChangeChart',
        value: function drawPopulationChangeChart(regionIds, data) {

            var chartData = [];
            var year;

            // Header
            //
            var header = ['Year'];

            for (var i = 0; i < regionIds.length; i++) {
                header[i + 1] = this.params.regions[i].name;
            }

            chartData.push(header);

            // Data
            //
            for (var i = 0; i < data.length; i++) {

                var m = i % regionIds.length;

                if (m == 0) {

                    year = [];
                    year[0] = data[i].year;
                    chartData.push(year);
                }

                year[m + 1] = parseFloat(data[i].population_percent_change) / 100;
            }

            this.drawLineChart('population-change-chart', chartData, {

                curveType: 'function',
                legend: { position: 'bottom' },
                pointShape: 'square',
                pointSize: 8,
                title: 'Population Change',
                vAxis: { format: '#.#%' }
            });
        }
    }, {
        key: 'drawPopulationMap',
        value: function drawPopulationMap() {
            var source = {
                name: 'population',
                domain: 'odn.data.socrata.com',
                fxf: 'e3rd-zzmr',
                variables: [{
                    name: 'Population',
                    column: 'population',
                    years: [2009, 2010, 2011, 2012, 2013],
                    value: parseFloat,
                    format: d3.format(',.0f')
                }, {
                    name: 'Population Change',
                    column: 'population_percent_change',
                    years: [2010, 2011, 2012, 2013],
                    value: parseFloat,
                    format: function format(value) {
                        return d3.format('.2f')(value) + '%';
                    }
                }]
            };

            var region = MapConstants.REGIONS.state;

            MapContainer.create('#map', source, region).catch(function (error) {
                throw error;
            });
        }

        // Places in region
        //

    }, {
        key: 'drawPlacesInRegion',
        value: function drawPlacesInRegion() {

            if (this.params.regions.length == 0) return;

            var region = this.params.regions[0];

            switch (region.type) {

                case 'nation':
                    this.drawChildPlacesInRegion(region, 'Regions in {0}'.format(region.name));break;
                case 'region':
                    this.drawChildPlacesInRegion(region, 'Divisions in {0}'.format(region.name));break;
                case 'division':
                    this.drawChildPlacesInRegion(region, 'States in {0}'.format(region.name));break;
                case 'state':
                    this.drawCitiesAndCountiesInState(region);break;
                case 'county':
                    this.drawOtherCountiesInState(region);break;
                case 'msa':
                    this.drawOtherMetrosInState(region);break;
                case 'place':
                    this.drawOtherCitiesInState(region);break;
            }
        }
    }, {
        key: 'drawChildPlacesInRegion',
        value: function drawChildPlacesInRegion(region, label) {
            var _this11 = this;

            var controller = new ApiController();

            controller.getChildRegions(region.id).then(function (response) {

                _this11.drawPlacesInRegionHeader('#places-in-region-header-0', label);
                _this11.drawPlacesInRegionList('#places-in-region-list-0', response);
            }).catch(function (error) {
                return console.error(error);
            });
        }
    }, {
        key: 'drawCitiesAndCountiesInState',
        value: function drawCitiesAndCountiesInState(region) {
            var _this12 = this;

            var controller = new ApiController();
            var citiesPromise = controller.getCitiesInState(region.id);
            var countiesPromise = controller.getCountiesInState(region.id);

            return Promise.all([citiesPromise, countiesPromise]).then(function (values) {

                if (values.length == 0) return;

                if (values[0].length > 0) {

                    _this12.drawPlacesInRegionHeader('#places-in-region-header-0', 'Places in {0}'.format(region.name));
                    _this12.drawPlacesInRegionList('#places-in-region-list-0', values[0]);
                }

                if (values[1].length > 0) {

                    _this12.drawPlacesInRegionHeader('#places-in-region-header-1', 'Counties in {0}'.format(region.name));
                    _this12.drawPlacesInRegionList('#places-in-region-list-1', values[1]);
                }
            }).catch(function (error) {
                return console.error(error);
            });
        }
    }, {
        key: 'drawOtherCitiesInState',
        value: function drawOtherCitiesInState(region) {
            var _this13 = this;

            var controller = new ApiController();

            controller.getParentState(region).then(function (response) {

                if (response.length == 0) return;

                var state = response[0];

                controller.getCitiesInState(state.parent_id).then(function (response) {

                    if (response.length == 0) return;

                    _this13.drawPlacesInRegionHeader('#places-in-region-header-0', 'Places in {0}'.format(state.parent_name));
                    _this13.drawPlacesInRegionList('#places-in-region-list-0', response);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawOtherCountiesInState',
        value: function drawOtherCountiesInState(region) {
            var _this14 = this;

            var controller = new ApiController();

            controller.getParentState(region).then(function (response) {

                if (response.length == 0) return;

                var state = response[0];

                controller.getCountiesInState(state.parent_id).then(function (response) {

                    if (response.length == 0) return;

                    _this14.drawPlacesInRegionHeader('#places-in-region-header-0', 'Counties in {0}'.format(state.parent_name));
                    _this14.drawPlacesInRegionList('#places-in-region-list-0', response);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'drawOtherMetrosInState',
        value: function drawOtherMetrosInState(region) {
            var _this15 = this;

            var controller = new ApiController();

            controller.getParentState(region).then(function (response) {

                if (response.length == 0) return;

                var state = response[0];

                controller.getMetrosInState(state.parent_id).then(function (response) {

                    if (response.length == 0) return;

                    _this15.drawPlacesInRegionHeader('#places-in-region-header-0', 'Metropolitan Areas in {0}'.format(state.parent_name));
                    _this15.drawPlacesInRegionList('#places-in-region-list-0', response);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }
    }, {
        key: 'removeCurrentRegions',
        value: function removeCurrentRegions(regions) {
            var maxCount = arguments.length <= 1 || arguments[1] === undefined ? 5 : arguments[1];

            var count = 0;
            var rg = [];

            for (var i = 0; i < regions.length; i++) {

                if (this.isRegionIdContainedInCurrentRegions(regions[i].child_id)) continue;

                rg.push(regions[i]);

                if (count == maxCount - 1) break;

                count++;
            }

            return rg;
        }
    }, {
        key: 'drawPlacesInRegionHeader',
        value: function drawPlacesInRegionHeader(headerId, label) {

            $(headerId).text(label).slideToggle(100);
        }
    }, {
        key: 'drawPlacesInRegionList',
        value: function drawPlacesInRegionList(listId, data) {
            var maxCount = arguments.length <= 2 || arguments[2] === undefined ? 5 : arguments[2];

            if (data.length == 0) return;

            var count = 0;
            var s = '';

            for (var i = 0; i < data.length; i++) {

                if (this.isRegionIdContainedInCurrentRegions(data[i].child_id)) continue;

                s += '<li><a href="';
                s += this.getSearchPageForRegionsAndVectorUrl(data[i].child_name) + '">';
                s += data[i].child_name;
                s += '</a></li>';

                if (count == maxCount - 1) break;

                count++;
            }

            $(listId).html(s);
            $(listId).slideToggle(100);
        }
    }, {
        key: 'isRegionIdContainedInCurrentRegions',
        value: function isRegionIdContainedInCurrentRegions(regionId) {

            for (var j = 0; j < this.params.regions.length; j++) {

                if (regionId == this.params.regions[j].id) return true;
            }

            return false;
        }

        // Similar regions
        //

    }, {
        key: 'drawSimilarRegions',
        value: function drawSimilarRegions(onClickRegion) {
            var _this16 = this;

            if (this.params.regions.length == 0) return;

            var region = this.params.regions[0];
            var controller = new ApiController();

            controller.getSupportedVectors(region.id).then(function (data) {
                return controller.getSimilarRegions(region.id, data.available_vectors);
            }).then(function (data) {
                return _this16.drawSimilarRegionsList(data, onClickRegion);
            }).catch(function (error) {
                return console.error(error);
            });
        }
    }, {
        key: 'drawSimilarRegionsList',
        value: function drawSimilarRegionsList(data, onClickRegion) {

            if (data.most_similar == undefined) return;

            var count = 0;
            var s = '';

            // Get the displayed regions
            //
            var displayedRegions = [];

            for (var i = 0; i < data.most_similar.length; i++) {

                if (this.isRegionIdContainedInCurrentRegions(data.most_similar[i].id)) continue;

                displayedRegions.push(data.most_similar[i]);

                if (count == 4) break;

                count++;
            }

            // Build list items
            //
            for (var i = 0; i < displayedRegions.length; i++) {
                s += '<li><a><i class="fa fa-plus"></i>' + displayedRegions[i].name + '</a></li>';
            }

            // Display the list
            //
            $('#similar-regions').html(s);
            $('#similar-regions').slideToggle(100);

            // Hook up the click handler
            //
            $('#similar-regions li a').click(function () {

                var index = $(this).parent().index();
                var controller = new ApiController();

                controller.getPlaceFromRoster(displayedRegions[index].id).then(function (data) {

                    if (data.length == 0) return;

                    onClickRegion(data[0].autocomplete_name);
                }).catch(function (error) {
                    return console.error(error);
                });
            });
        }

        // Draw charts
        //

    }, {
        key: 'drawLineChart',
        value: function drawLineChart(chartId, data, options) {

            var dataTable = google.visualization.arrayToDataTable(data);
            var chart = new google.visualization.LineChart(document.getElementById(chartId));

            chart.draw(dataTable, options);
        }
    }, {
        key: 'drawSteppedAreaChart',
        value: function drawSteppedAreaChart(chartId, data, options) {

            var dataTable = google.visualization.arrayToDataTable(data);
            var chart = new google.visualization.SteppedAreaChart(document.getElementById(chartId));

            chart.draw(dataTable, options);
        }

        // Maps
        //

    }, {
        key: 'getRadiusScaleLinear',
        value: function getRadiusScaleLinear(values) {

            return d3.scale.linear().domain(d3.extent(values)).range(this.MAP_RADIUS_SCALE);
        }
    }, {
        key: 'getRadiusScaleLog',
        value: function getRadiusScaleLog(values) {

            return d3.scale.log().domain(d3.extent(values)).range(this.MAP_RADIUS_SCALE);
        }
    }, {
        key: 'getColorScale',
        value: function getColorScale(values) {
            var _this17 = this;

            var domain = (function () {

                var step = 1.0 / _this17.MAP_COLOR_SCALE.length;

                function quantile(value, index, list) {
                    return d3.quantile(values, (index + 1) * step);
                }

                return _.map(_this17.MAP_COLOR_SCALE.slice(1), quantile);
            })();

            return d3.scale.quantile().domain(domain).range(this.MAP_COLOR_SCALE);
        }
    }, {
        key: 'drawCirclesForPlaces',
        value: function drawCirclesForPlaces(map, places, radiusScale, colorScale) {

            places.forEach(function (place) {

                var feature = {
                    "type": "Feature",
                    "properties": {
                        "name": place.name
                    },
                    "geometry": {
                        "coordinates": place.coordinates,
                        "type": "Point"
                    }
                };

                var options = {
                    fillColor: colorScale(place.value),
                    fillOpacity: 1,
                    opacity: 0,
                    radius: 8,
                    stroke: false,
                    weight: 0
                };

                L.geoJson(feature, {
                    pointToLayer: function pointToLayer(feature, latlng) {
                        return L.circle(latlng, radiusScale(place.value), options);
                    }
                }).addTo(map);
            });
        }
    }, {
        key: 'drawMarkersForPlaces',
        value: function drawMarkersForPlaces(map, places) {

            places.forEach(function (place) {

                var feature = {
                    "type": "Feature",
                    "properties": {
                        "name": place.name
                    },
                    "geometry": {
                        "coordinates": place.location.coordinates,
                        "type": "Point"
                    }
                };

                L.geoJson(feature).addTo(map);
            });
        }
    }, {
        key: 'getPlacesForRegion',
        value: function getPlacesForRegion(data) {
            var _this18 = this;

            var places = [];

            data.forEach(function (place) {

                _this18.params.regions.forEach(function (region) {

                    if (place.id == region.id) places.push(place);
                });
            });

            return places;
        }

        // Paging
        //

    }, {
        key: 'fetchNextPage',
        value: function fetchNextPage() {

            if (this.fetching || this.fetchedAll) return;

            this.fetching = true;
            this.incrementPage();

            var self = this;

            $.ajax(this.getSearchResultsUrl()).done(function (data, textStatus, jqXHR) {

                if (jqXHR.status == 204) {
                    // no content

                    self.decrementPage();
                    self.fetching = false;
                    self.fetchedAll = true;
                    return;
                }

                $('.datasets').append(data);
                self.fetching = false;
            });
        }
    }, {
        key: 'getSearchPageForRegionsAndVectorUrl',
        value: function getSearchPageForRegionsAndVectorUrl(regions, vector, searchResults, queryString) {

            var url = '/';

            if (typeof regions === 'string') {

                url += regions.replace(/,/g, '').replace(/ /g, '_');
            } else if (Array.isArray(regions)) {

                var regionNames = [];

                regionNames = regions.map(function (region) {
                    return region.replace(/,/g, '').replace(/ /g, '_');
                });

                url += regionNames.join('_vs_');
            } else {

                url += 'search';
            }

            if (vector) url += '/' + vector;

            if (searchResults) url += '/search-results';

            if (queryString) url += queryString;

            return url;
        }
    }, {
        key: 'getSearchPageUrl',
        value: function getSearchPageUrl(searchResults) {

            if (this.params.regions.length > 0 || this.params.autoSuggestedRegion) {

                var regionNames = [];

                if (this.params.resetRegions == false) regionNames = this.params.regions.map(function (region) {
                    return region.autoCompleteName;
                });

                if (this.params.autoSuggestedRegion) regionNames.push(this.params.autoSuggestedRegion);

                return this.getSearchPageForRegionsAndVectorUrl(regionNames, this.params.vector, searchResults, this.getSearchQueryString());
            } else {

                return this.getSearchPageForRegionsAndVectorUrl(null, this.params.vector, searchResults, this.getSearchQueryString());
            }
        }
    }, {
        key: 'getSearchResultsUrl',
        value: function getSearchResultsUrl() {

            return this.getSearchPageUrl(true);
        }
    }, {
        key: 'getSearchQueryString',
        value: function getSearchQueryString() {

            var url = '?q=' + encodeURIComponent(this.params.q);

            if (this.params.page > 1) url += '&page=' + this.params.page;

            if (this.params.categories.length > 0) url += '&categories=' + encodeURIComponent(this.params.categories.join(','));

            if (this.params.domains.length > 0) url += '&domains=' + encodeURIComponent(this.params.domains.join(','));

            if (this.params.standards.length > 0) url += '&standards=' + encodeURIComponent(this.params.standards.join(','));

            if (this.params.debug) url += '&debug=';

            return url;
        }
    }, {
        key: 'incrementPage',
        value: function incrementPage() {

            this.params.page++;
        }
    }, {
        key: 'navigate',
        value: function navigate() {

            window.location.href = this.getSearchPageUrl();
        }
    }, {
        key: 'removeRegion',
        value: function removeRegion(regionIndex) {

            this.params.regions.splice(regionIndex, 1); // remove at index i
            this.params.page = 1;
        }
    }, {
        key: 'setAutoSuggestedRegion',
        value: function setAutoSuggestedRegion(region, resetRegions) {

            this.params.autoSuggestedRegion = region;
            this.params.resetRegions = resetRegions;
            this.params.page = 1;
        }
    }, {
        key: 'toggleCategory',
        value: function toggleCategory(category) {

            var i = this.params.categories.indexOf(category);

            if (i > -1) this.params.categories.splice(i, 1); // remove at index i
            else this.params.categories.push(category);
        }
    }, {
        key: 'toggleDomain',
        value: function toggleDomain(domain) {

            var i = this.params.domains.indexOf(domain);

            if (i > -1) this.params.domains.splice(i, 1); // remove at index i
            else this.params.domains.push(domain);
        }
    }, {
        key: 'toggleStandard',
        value: function toggleStandard(standard) {

            var i = this.params.standards.indexOf(standard);

            if (i > -1) this.params.standards.splice(i, 1); // remove at index i
            else this.params.standards.push(standard);
        }
    }]);

    return SearchPageController;
})();
'use strict';

$(document).ready(function () {

    // Search page controller
    //
    var searchPageController = new SearchPageController(_params);

    // Main search box
    //
    multiComplete('#q', '.region-list').listen();

    // Chart column
    //
    if (_params.regions.length > 0) {

        switch (_params.vector) {

            case 'population':
                searchPageController.drawPopulationData();
                break;

            case 'earnings':
                searchPageController.drawEarningsData();
                break;

            case 'health':
                searchPageController.drawHealthData();
                break;

            case 'education':
                searchPageController.drawEducationData();
                break;

            case 'occupations':
                searchPageController.drawOccupationsData();
                break;

            case 'cost_of_living':
                searchPageController.drawCostOfLivingData();
                break;

            case 'gdp':
                searchPageController.drawGdpData();
                break;

            default:
                searchPageController.drawPopulationData();
                break;
        }
    }
});
//# sourceMappingURL=search.min.js.map
