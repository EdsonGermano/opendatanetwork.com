'use strict';

$(document).ready(function () {

    // Attach handler to the search button
    //
    $('.search-link').click(function () {

        var text = $('#q').val().trim();

        if (text.length === 0) $('#q').focus();else $('#form').submit();
    });
});

// Array extensions
//
Array.prototype.includes = function (s) {

    return this.indexOf(s) > -1;
};

// String extensions
//
String.prototype.format = function () {

    var args = arguments;

    return this.replace(/{(\d+)}/g, function (match, number) {
        return typeof args[number] != 'undefined' ? args[number] : match;
    });
};

String.prototype.split2 = function (s) {

    var rg = this.split(s);

    if (rg.length == 1 && rg[0] === '') return [];

    return rg;
};
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ApiController = (function () {
    function ApiController() {
        _classCallCheck(this, ApiController);

        this.autoCompleteNameSuggestUrl = 'https://odn.data.socrata.com/views/7g2b-8brv/columns/autocomplete_name/suggest/{0}?size=10&fuzz=0';
        this.categoriesUrl = '/categories.json';
        this.childRegionsUrl = 'https://odn.data.socrata.com/resource/eyae-8jfy?parent_id={0}&$limit={1}';
        this.costOfLivingUrl = 'https://odn.data.socrata.com/resource/hpnf-gnfu.json?$order=name&$where=';
        this.domainsUrl = 'https://api.us.socrata.com/api/catalog/v1/domains';
        this.earningsByPlaceUrl = 'https://odn.data.socrata.com/resource/wmwh-4vak.json/?type=place&$limit=50000&$where=population%20%3E%205000';
        this.earningsUrl = 'https://odn.data.socrata.com/resource/wmwh-4vak.json?$where=';
        this.educationByPlaceUrl = 'https://odn.data.socrata.com/resource/uf4m-5u8r.json?type=place&$limit=50000&$where=population%20%3E%205000';
        this.educationUrl = 'https://odn.data.socrata.com/resource/uf4m-5u8r.json?$where=';
        this.gdpUrl = 'https://odn.data.socrata.com/resource/ks2j-vhr8.json?$where=';
        this.mostPopulousRegionTypeUrl = 'https://odn.data.socrata.com/resource/eyae-8jfy?parent_id={0}&child_type={1}&$limit={2}&$order=child_population desc';
        this.occupationsByPlaceUrl = 'https://odn.data.socrata.com/resource/qfcm-fw3i.json?occupation={0}&type=place&$limit=50000&$where=population%20%3E%205000';
        this.occupationsUrl = 'https://odn.data.socrata.com/resource/qfcm-fw3i.json?$order=occupation&$where=';
        this.parentStateUrl = 'https://odn.data.socrata.com/resource/eyae-8jfy?parent_type=state&child_id={0}';
        this.placeFromRosterUrl = 'https://odn.data.socrata.com/resource/kmnh-b5wu?id={0}';
        this.placesUrl = 'https://odn.data.socrata.com/resource/gm3u-gw57.json/?type=place&$limit=50000&$where=population%20%3E%205000';
        this.populationUrl = 'https://odn.data.socrata.com/resource/e3rd-zzmr.json?$order=year,name&$where=';
        this.similarRegionsUrl = 'https://socrata-peers.herokuapp.com/peers.json?id={0}&vectors={1}&n=10';
        this.supportedVectorsUrls = 'http://socrata-peers.herokuapp.com/supported.json?id={0}';
        this.healthDataUrls = {
            rwjf_county_health_rankings_2015: "https://odn.data.socrata.com/resource/7ayp-utp2.json?$where=",
            cdc_brfss_prevalence_2011_2013: "https://odn.data.socrata.com/resource/n4rt-3rmd.json?$where="
        };
    }

    // Promises
    //

    _createClass(ApiController, [{
        key: 'getAutoCompleteNameSuggestions',
        value: function getAutoCompleteNameSuggestions(searchTerm) {

            return d3.promise.json(this.autoCompleteNameSuggestUrl.format(encodeURIComponent(searchTerm)));
        }
    }, {
        key: 'getCategories',
        value: function getCategories() {

            return d3.promise.json(this.categoriesUrl);
        }
    }, {
        key: 'getChildRegions',
        value: function getChildRegions(regionId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.childRegionsUrl.format(regionId, limit));
        }
    }, {
        key: 'getCitiesInState',
        value: function getCitiesInState(stateId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.mostPopulousRegionTypeUrl.format(stateId, 'place', limit));
        }
    }, {
        key: 'getCostOfLivingData',
        value: function getCostOfLivingData(regionIds) {

            return this.getData(this.costOfLivingUrl, regionIds);
        }
    }, {
        key: 'getCountiesInState',
        value: function getCountiesInState(stateId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.mostPopulousRegionTypeUrl.format(stateId, 'county', limit));
        }
    }, {
        key: 'getData',
        value: function getData(url, regionIds) {

            var segments = regionIds.map(function (regionId) {
                return 'id=\'' + regionId + '\'';
            });

            return d3.promise.json(url + encodeURI(segments.join(' OR ')));
        }
    }, {
        key: 'getDomains',
        value: function getDomains() {

            return d3.promise.json(this.domainsUrl);
        }
    }, {
        key: 'getEarningsByPlace',
        value: function getEarningsByPlace() {

            return d3.promise.json(this.earningsByPlaceUrl);
        }
    }, {
        key: 'getEarningsData',
        value: function getEarningsData(regionIds) {

            return this.getData(this.earningsUrl, regionIds);
        }
    }, {
        key: 'getEducationByPlace',
        value: function getEducationByPlace() {

            return d3.promise.json(this.educationByPlaceUrl);
        }
    }, {
        key: 'getEducationData',
        value: function getEducationData(regionIds) {

            return this.getData(this.educationUrl, regionIds);
        }
    }, {
        key: 'getGdpData',
        value: function getGdpData(regionIds) {

            return this.getData(this.gdpUrl, regionIds);
        }
    }, {
        key: 'getMetrosInState',
        value: function getMetrosInState(stateId) {
            var limit = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];

            return d3.promise.json(this.mostPopulousRegionTypeUrl.format(stateId, 'msa', limit));
        }
    }, {
        key: 'getOccupationsByPlace',
        value: function getOccupationsByPlace(occupation) {

            return d3.promise.json(this.occupationsByPlaceUrl.format(occupation));
        }
    }, {
        key: 'getOccupationsData',
        value: function getOccupationsData(regionIds) {

            return this.getData(this.occupationsUrl, regionIds);
        }
    }, {
        key: 'getParentState',
        value: function getParentState(region) {

            return d3.promise.json(this.parentStateUrl.format(region.id));
        }
    }, {
        key: 'getPlaceFromRoster',
        value: function getPlaceFromRoster(regionId) {

            return d3.promise.json(this.placeFromRosterUrl.format(regionId));
        }
    }, {
        key: 'getPopulationData',
        value: function getPopulationData(regionIds) {

            return this.getData(this.populationUrl, regionIds);
        }
    }, {
        key: 'getPlaces',
        value: function getPlaces() {

            return d3.promise.json(this.placesUrl);
        }
    }, {
        key: 'getSimilarRegions',
        value: function getSimilarRegions(regionId, vectors) {

            return d3.promise.json(this.similarRegionsUrl.format(regionId, vectors.join(',')));
        }
    }, {
        key: 'getSupportedVectors',
        value: function getSupportedVectors(regionId) {

            return d3.promise.json(this.supportedVectorsUrls.format(regionId));
        }

        // health data retrievers

    }, {
        key: 'getHealthRwjfChrData',
        value: function getHealthRwjfChrData(regionIds) {
            return this.getData(this.healthDataUrls.rwjf_county_health_rankings_2015, regionIds);
        }
    }]);

    return ApiController;
})();
'use strict';

var Constants = {
    ROSTER_URL: 'https://federal.demo.socrata.com/resource/7g2b-8brv.json',

    // maximum number of results from Socrata
    LIMIT: 50000
};
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RegionLookup = (function () {
    function RegionLookup() {
        _classCallCheck(this, RegionLookup);
    }

    _createClass(RegionLookup, null, [{
        key: 'get',
        value: function get(params) {
            return $.getJSON(Constants.ROSTER_URL + '?' + $.param(params));
        }
    }, {
        key: 'getOne',
        value: function getOne(params) {
            function selectRegion(regions) {
                if (regions.length === 0) {
                    console.warn('no regions found for params: ');
                    console.warn(params);
                    return null;
                } else if (regions.length === 1) {
                    return regions[0];
                } else {
                    var places = _.filter(regions, function (region) {
                        return region.type === 'place';
                    });

                    if (places.length > 0) {
                        return places[0];
                    } else {
                        return regions[0];
                    }
                }
            }

            return new Promise(function (resolve, reject) {
                RegionLookup.get(params).then(function (regions) {
                    resolve(selectRegion(regions));
                }, function (error) {
                    throw error;
                });
            });
        }
    }, {
        key: 'byName',
        value: function byName(name) {
            return RegionLookup.getOne({ name: name });
        }
    }, {
        key: 'byID',
        value: function byID(id) {
            return RegionLookup.getOne({ id: id });
        }
    }, {
        key: 'byAutocompleteName',
        value: function byAutocompleteName(name) {
            return RegionLookup.getOne({ autocomplete_name: name });
        }
    }]);

    return RegionLookup;
})();
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Complete = (function () {
    function Complete(queryBuilder, results) {
        _classCallCheck(this, Complete);

        this.queryBuilder = queryBuilder;
        this.results = results;
    }

    _createClass(Complete, [{
        key: 'get',
        value: function get(query) {
            if (query === '') {
                return [];
            } else {
                this.results.handle($.getJSON(this.queryBuilder(query)));
            }
        }
    }]);

    return Complete;
})();

var Results = (function () {
    function Results(type, resultSelection, onSelect) {
        _classCallCheck(this, Results);

        this.type = type;
        this.onSelect = onSelect;

        this.container = resultSelection.append('div').attr('class', 'autocomplete-results-container').style('display', 'none');

        this.title = this.container.append('p').attr('class', 'autocomplete-results-title').text(this.type);

        this.results = this.container.append('div').attr('class', 'autocomplete-results');
    }

    _createClass(Results, [{
        key: 'hide',
        value: function hide() {
            this.container.style('display', 'none');
        }
    }, {
        key: 'unhide',
        value: function unhide() {
            this.container.style('display', 'block');
        }
    }, {
        key: 'empty',
        value: function empty() {
            this.results.html('');
        }
    }, {
        key: 'handle',
        value: function handle(resultsPromise) {
            var _this = this;

            var success = function success(results) {
                _this.empty();

                var options = results.options;
                if (options.length === 0) {
                    _this.hide();
                } else {
                    _this.unhide();
                    _this.show(options);
                }
            };

            var failure = function failure(error) {
                throw error;
            };

            resultsPromise.then(success, failure);
        }
    }, {
        key: 'show',
        value: function show(options) {
            var _this2 = this;

            this.results.selectAll('li').data(options).enter().append('li').html(function (option) {
                return option.text;
            }).on('mouseover', function () {
                d3.select(this).classed('selected', true);
            }).on('mouseout', function () {
                d3.select(this).classed('selected', false);
            }).on('click', function (option) {
                _this2.onSelect(option.text);
            });
        }
    }]);

    return Results;
})();

var AutoSuggestRegionController = (function () {
    function AutoSuggestRegionController(inputSelection, resultSelection, completers) {
        _classCallCheck(this, AutoSuggestRegionController);

        this.inputSelection = inputSelection;
        this.resultSelection = resultSelection;
        this.completers = completers;
    }

    _createClass(AutoSuggestRegionController, [{
        key: 'listen',
        value: function listen() {
            var self = this;
            self.inputSelection.on('input', function () {
                self.suggest(this.value);
            });
        }
    }, {
        key: 'navigate',
        value: function navigate(path) {
            window.location.href = path;
        }
    }, {
        key: 'suggest',
        value: function suggest(term) {
            if (term === '') {
                this.resultSelection.style('display', 'none');
            } else {
                this.resultSelection.style('display', 'block');

                this.completers.forEach(function (completer) {
                    completer.get(term);
                });
            }
        }
    }]);

    return AutoSuggestRegionController;
})();
'use strict';

// Autocomplete on datasets, regions, publishers, and categories.
function multiComplete(inputSelector, resultSelector) {
    function autocompleteURL(domain, fxf, column) {
        return function (query) {
            return 'https://' + domain + '/views/' + fxf + '/columns/' + column + '/suggest/' + query + '?size=5';
        };
    }

    function navigate(path) {
        window.location.href = path;
    }

    var domain = 'odn.data.socrata.com';
    var inputSelection = d3.select(inputSelector);
    var resultSelection = d3.select(resultSelector);

    var datasetURL = autocompleteURL(domain, 'fpum-bjbr', 'name');
    var datasetSelect = function datasetSelect(dataset) {
        return navigate('/search?q=' + dataset);
    };
    var datasetResults = new Results('Datasets', resultSelection, datasetSelect);
    var datasetComplete = new Complete(datasetURL, datasetResults);

    var regionURL = autocompleteURL(domain, '7g2b-8brv', 'autocomplete_name');
    var regionSelect = function regionSelect(region) {
        return navigate('/' + region.replace(/ /g, '_'));
    };
    var regionResults = new Results('Regions', resultSelection, regionSelect);
    var regionComplete = new Complete(regionURL, regionResults);

    var publisherURL = autocompleteURL(domain, '8ae5-ghum', 'domain');
    var publisherSelect = function publisherSelect(publisher) {
        return navigate('/search?domains=' + publisher);
    };
    var publisherResults = new Results('Publishers', resultSelection, publisherSelect);
    var publisherComplete = new Complete(publisherURL, publisherResults);

    var categoryURL = autocompleteURL(domain, '864v-r7tf', 'category');
    var categorySelect = function categorySelect(category) {
        return navigate('/search?categories=' + category);
    };
    var categoryResults = new Results('Categories', resultSelection, categorySelect);
    var categoryComplete = new Complete(categoryURL, categoryResults);

    var completers = [datasetComplete, regionComplete, publisherComplete, categoryComplete];

    return new AutoSuggestRegionController(inputSelection, resultSelection, completers);
}
'use strict';

// Autocomplete to regions with data for the given source.
var sourceComplete = (function () {
    var domain = 'odn.data.socrata.com';
    var fxf = 'pfgp-ifph';

    var nameToColumn = new Map();
    nameToColumn.set('population', 'population');
    nameToColumn.set('earnings', 'earnings');
    nameToColumn.set('education', 'education');
    nameToColumn.set('occupations', 'occupations');
    nameToColumn.set('cost_of_living', 'rpp');
    nameToColumn.set('gdp', 'gdp');

    var defaultColumn = 'population';

    function urlFor(column) {
        return function (query) {
            return 'https://' + domain + '/views/' + fxf + '/columns/' + column + '/suggest/' + query + '?size=5';
        };
    }

    function navigate(path) {
        window.location.href = path;
    }

    return function (inputSelector, resultSelector, name, select) {
        var inputSelection = d3.select(inputSelector);
        var resultSelection = d3.select(resultSelector);

        var column = nameToColumn.has(name) ? nameToColumn.get(name) : defaultColumn;
        var url = urlFor(column);
        var results = new Results('Regions with Data', resultSelection, select);
        var complete = new Complete(url, results);

        return new AutoSuggestRegionController(inputSelection, resultSelection, [complete]);
    };
})();
'use strict';

$(document).ready(function () {
    // Slider
    //
    $('.slider').slick({
        arrows: false,
        autoplay: true,
        autoplaySpeed: 2000,
        slidesToScroll: 1,
        slidesToShow: 5
    });

    // Autocomplete
    //
    multiComplete('#q', '.region-list').listen();

    // Search button
    //
    $('#search-button').click(function () {
        $('#form').submit();
    });

    // Communities menu
    //
    $('#menu-item-communities').mouseenter(function () {

        $('#menu-communities').slideToggle(100);
        $('#menu-item-communities').addClass('selected');

        searchMenu.hideOptionsMenu();
    });

    $('#menu-item-communities').mouseleave(function () {

        $('#menu-communities').hide(100);
        $('#menu-item-communities').removeClass('selected');
    });
});
//# sourceMappingURL=home.min.js.map
