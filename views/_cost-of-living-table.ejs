<table class="vertical hidden">
<tr>
    <th class="empty"></th>
<% for (var i = 0; i < tableData.costOfLivingData.length; i++) { %>
    <th colspan="2" class="color-<%= i %>"><%= params.regions[i].name %><div></div></th>
<% } %>
</tr>
<tr class="sub-header-row">
    <td class="empty"></td>
<% for (var i = 0; i < tableData.costOfLivingData.length; i++) { %>
    <td>Value</td>
    <td class="color-<%= i %>">Percentile<div></div></td>
<% } %>
</tr>
<%
    const components = ['All', 'Goods', 'Other', 'Rents'];
    for (var i = 0; i < components.length; i++) {
%>
<tr>
    <td class="category-header"><%= components[i] %></td>
<%
    for (var j = 0; j < params.regions.length; j++) {

        var o = getLatestCostOfLiving(tableData.costOfLivingData[j], params.regions[j].id, components[i]);
        var value = (o != null) ? parseFloat(o.index) : 'NA';
        var percentile = (o != null) ? getPercentile(o.rank, o.total_ranks) : 'NA'; 
%>
    <td><%= value %><div></div></td>
    <td class="color-<%= j %>"><%= percentile %><div></div></td>
<% } %>
</tr>
<% } %>
</table>
<%
function getLatestCostOfLiving(data, regionId, component) {

    var datum = null;

    for (var i = 0; i < data.length; i++) {

        if (data[i].id != regionId)
            continue;

        if (data[i].component != component)
            continue;

        if (datum == null) {

            datum = data[i];
            continue;
        }

        if (parseInt(data[i].year) <= parseInt(datum.year))
            continue;

        datum = data[i];
    }

    return datum;
}

function getPercentile(rankString, totalRanksString) {

    const totalRanks = parseInt(totalRanksString);
    const rank = parseInt(rankString);
    const percentile = parseInt(((totalRanks - rank) / totalRanks) * 100);

    return numeral(percentile).format('0o');
}
%>
